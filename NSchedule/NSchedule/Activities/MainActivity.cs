using System;
using System.Threading.Tasks;
using Android.App;
using Android.Content;
using Android.OS;
using Android.Runtime;
using Android.Support.Design.Widget;
using Android.Support.V7.App;
using Android.Views;
using Android.Widget;
using NSchedule.Helpers;
using Xamarin.Essentials;
using NSchedule.Entities;

namespace NSchedule.Activities
{
    [Activity(Label = "@string/app_name", Theme = "@style/AppTheme", MainLauncher = true, NoHistory = true)]
    public class MainActivity : Activity
    {
        protected override void OnCreate(Bundle savedInstanceState)
        {
            Statics.InitializeStatics();

            base.OnCreate(savedInstanceState);
            Xamarin.Essentials.Platform.Init(this, savedInstanceState);

            // Setting layout.
            SetContentView(Resource.Layout.MainActivity);
            FindViewById<ProgressBar>(Resource.Id.loginProgress).Visibility = ViewStates.Invisible;

            // preloading settings
            var settings = Settings.Load();

            // Check whether a valid session exists
            //var sessionexists = Statics.RestHelper.ReconnectSessionAsync().GetAwaiter().GetResult();

            //if (sessionexists)
            //{
            //    StartSchedule();
            //    return;
            //}

            // Autofill email
            FindViewById<EditText>(Resource.Id.emailfield).Text = settings.Email;

            if (settings.RememberPassword)
            {
                // If remember password is checked, autofill password
                FindViewById<CheckBox>(Resource.Id.rememberPassword).Checked = true;
                FindViewById<EditText>(Resource.Id.passwordfield).Text = settings.Password;
            }

            // Setting event for the login button.
            var loginbtn = FindViewById<Button>(Resource.Id.loginbutton);
            loginbtn.Click += (sender, e) =>
            {
                Task.Run(async () => { await Loginbtn_Click(); });
            };

            // Setting event for disclaimer easter egg
            var disclaimer = FindViewById<TextView>(Resource.Id.disclaimer);
            disclaimer.Click += Disclaimer_Click;
        }

        private int clicks = 0;
        private void Disclaimer_Click(object sender, EventArgs e)
        {
            clicks++;

            if(clicks > 10)
            {
                Toast.MakeText(Application.Context, "Onii-chan, yamero!", ToastLength.Long).Show();
            }
        }

        private async Task Loginbtn_Click()
        {
            // Getting email and password from their respective fields.
            var email = FindViewById<EditText>(Resource.Id.emailfield).Text;
            var password = FindViewById<EditText>(Resource.Id.passwordfield).Text;

            // Preloading settings
            var settings = await Settings.LoadAsync();
            settings.Email = email;

            // Notify the user we are trying to log in, show progressbar and disable button
            RunOnUiThread(() =>
            {
                FindViewById<Button>(Resource.Id.loginbutton).Enabled = false;
                FindViewById<ProgressBar>(Resource.Id.loginProgress).Visibility = ViewStates.Visible;
                Toast.MakeText(Application.Context, $"Logging in...", ToastLength.Long).Show();
            });

            // Try authenticating
            var auth = await Statics.RestHelper.Authenticate(email, password, settings.RememberPassword);

            // Tell the user our result and then do something based on that
            RunOnUiThread(() =>
            {
                // Hide progressbar again and show auth result message
                FindViewById<ProgressBar>(Resource.Id.loginProgress).Visibility = ViewStates.Invisible;
                Toast.MakeText(Application.Context, auth.Message, ToastLength.Long).Show();

                if (!auth.Success)
                {
                    // auth failed, enable login button for a new attempt
                    FindViewById<Button>(Resource.Id.loginbutton).Enabled = true;
                }
                else
                {
                    // auth success! go to new activity and finish this one.
                    var rember = FindViewById<CheckBox>(Resource.Id.rememberPassword).Checked;

                    if (rember)
                    {
                        settings.RememberPassword = true;
                        settings.Password = password;
                    }

                    settings.Save();
                    StartSchedule();
                }
            });
        }

        private void StartSchedule()
        {
            Intent intent = new Intent(this, typeof(ScheduleActivity));
            StartActivity(intent);
            Finish();
        }

        // Auto generated by xamarin. Seems important. Guess we'll keep it for now.
        public override void OnRequestPermissionsResult(int requestCode, string[] permissions, [GeneratedEnum] Android.Content.PM.Permission[] grantResults)
        {
            Xamarin.Essentials.Platform.OnRequestPermissionsResult(requestCode, permissions, grantResults);

            base.OnRequestPermissionsResult(requestCode, permissions, grantResults);
        }
	}
}

